{"version":3,"file":"static/js/login.c07a0683.chunk.js","mappings":"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","sources":["api/apis.ts","api/index.ts","hooks/index.ts","webpack://react-mind-map/./src/pages/Login/index.module.less?7ae8","pages/Login/index.tsx","utils/const.ts"],"sourcesContent":["import { getApi, posApi } from '.';\n\nexport const doLogin = (data) => {\n  return posApi('/user/doLogin', { ...data });\n};\n\nexport const register = (data) => {\n  return posApi('/user/register', { ...data });\n};\n\nexport const getCaptcha = (data) => {\n  return getApi('/user/getCaptcha', { ...data });\n};\n\nexport const isLogin = () => {\n  return getApi('/user/isLogin', {});\n};\n\nexport const uploadPic = (data: any) => {\n  return posApi('/file/upload', data);\n};\n\nexport const getFilePic = (data: any) => {\n  return getApi('/file/getFile', data);\n};\n","import { useConfigToken } from '@/store/login';\nimport axios from 'axios';\n\nexport const isSuccess = (code) => {\n  return ['200', 200].includes(code);\n};\n\nexport const isUnLogin = (code) => {\n  return ['100005', 100005].includes(code);\n};\n\nexport const updateUrl = '';\n\nconst instance = axios.create({\n  baseURL: 'http://47.121.126.205:8099/file-api/v1', //'http://www.shantu.top:8099/file-api/v1', // //'https://some-domain.com/api/',\n  // baseURL: 'http://www.shantu.top/file-api/v1',\n  timeout: 7000,\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8',\n  },\n  // `withCredentials` 表示跨域请求时是否需要使用凭证\n  withCredentials: false, // default\n});\n// 添加请求拦截器\ninstance.interceptors.request.use(\n  function (config) {\n    // 在发送请求之前做些什么\n    return config;\n  },\n  function (error) {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n  },\n);\n\n// 添加响应拦截器\ninstance.interceptors.response.use(\n  function (response) {\n    // 对响应数据做点什么\n    return response;\n  },\n  function (error) {\n    // 对响应错误做点什么\n    return Promise.reject({\n      code: error.response.data.status,\n      data: error.response.data.error || '网络错误，请稍后重试',\n    });\n  },\n);\n\nexport const posApi = (url: string, data?: any): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    const { getToken } = useConfigToken();\n    const token = getToken();\n    const axiosOptions = {\n      url: url,\n      method: 'post',\n      data: Object.assign({ ...data }),\n      headers: {\n        token,\n      },\n    };\n    instance\n      .request(axiosOptions)\n      .then((data) => {\n        resolve(data.data);\n      })\n      .catch((e) => {\n        reject(e.message);\n      });\n  });\n};\n\nexport const getApi = (url: string, data?: any): Promise<any> => {\n  // 与业务无关的异常将在这里处理\n  return new Promise((resolve, reject) => {\n    const { getToken } = useConfigToken();\n    const token = getToken();\n    const axiosOptions = {\n      url: url,\n      method: 'get',\n      params: data,\n      headers: {\n        token,\n      },\n    };\n    instance\n      .request(axiosOptions)\n      .then((data) => {\n        resolve(data.data);\n      })\n      .catch((e) => {\n        reject(e.message);\n      });\n  });\n};\n","import { useLocation } from 'react-router-dom';\n\nfunction useUrlParams() {\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n\n  const paramsObject = {};\n  params.forEach((value, key) => {\n    paramsObject[key] = value;\n  });\n\n  return paramsObject;\n}\n\nexport { useUrlParams };\n","// extracted by mini-css-extract-plugin\nexport default {\"loginWarp\":\"index_loginWarp__bO2PU\",\"innerWarp\":\"index_innerWarp__goM8E\"};","import { memo, useMemo, useState } from 'react';\nimport {\n  AutoComplete,\n  AutoCompleteProps,\n  Button,\n  Checkbox,\n  Flex,\n  Form,\n  Input,\n  message,\n} from 'antd';\n\nimport styles from './index.module.less';\nimport { LockOutlined, UserOutlined } from '@ant-design/icons';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { doLogin } from '@/api/apis';\nimport { isSuccess } from '@/api';\nimport { emailArr } from '@/utils/const';\nimport { useConfigToken, useGonfigUserName } from '@/store/login';\nimport { useUrlParams } from '@/hooks';\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const urlData: any = useUrlParams();\n\n  const search = useMemo(() => {\n    if (urlData.from) {\n      return `?from=${urlData.from}`;\n    }\n  }, [urlData]);\n\n  const { setToken } = useConfigToken();\n  const { setUserName } = useGonfigUserName();\n\n  // 邮箱后缀\n  const [options, setOptions] = useState<AutoCompleteProps['options']>([]);\n  const handleSearch = (value: string) => {\n    setOptions(() => {\n      if (!value || value.includes('@')) {\n        return [];\n      }\n      return emailArr.map((domain) => ({\n        label: `${value}@${domain}`,\n        value: `${value}@${domain}`,\n      }));\n    });\n  };\n\n  // 用户名校验\n  const valUserName = (rules, value, callback) => {\n    if (/^[A-Za-z0-9\\u4e00-\\u9fa5]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/.test(value)) {\n      callback();\n    } else {\n      callback(new Error('请输入正确的邮箱'));\n      // return {\n      //   pattern: false,\n      //   message: '',\n      // };\n    }\n  };\n\n  const onFinish = async (values: any) => {\n    const res = await doLogin({ username: values.username, passwordOrCaptcha: values.password });\n    if (isSuccess(res.code)) {\n      message.success({\n        content: '登录成功，即将跳转',\n      });\n      setToken(res.data.token);\n      setUserName(values.username);\n      setTimeout(() => {\n        if (urlData?.from) {\n          window.location.href = urlData.from;\n        }\n        navigate('/');\n      }, 3000);\n    } else {\n      message.error({\n        content: res.data || '注册失败，请稍后重试',\n      });\n      return;\n    }\n\n    // console.log('Received values of form: ', values);\n  };\n\n  return (\n    <div className={styles.loginWarp}>\n      <div className={styles.innerWarp}>\n        <Form name=\"login\" initialValues={{ remember: true }} onFinish={onFinish}>\n          <Form.Item name=\"username\" rules={[{ required: true, validator: valUserName }]}>\n            {/* <Input prefix={<UserOutlined />} placeholder=\"Username\" /> */}\n\n            <AutoComplete\n              placeholder=\"请输入邮箱用户名\"\n              prefix={<UserOutlined />}\n              // style={{ width: 200 }}\n              onSearch={handleSearch}\n              options={options}\n            />\n          </Form.Item>\n\n          <Form.Item name=\"password\" rules={[{ required: true, message: '请输入超过6位的密码' }]}>\n            <Input.Password\n              minLength={6}\n              prefix={<LockOutlined />}\n              type=\"password\"\n              placeholder=\"请输入密码\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Flex justify=\"space-between\" align=\"center\">\n              <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\n                <Checkbox>记住状态</Checkbox>\n              </Form.Item>\n              {/* <Link\n                to={{\n                  // pathname: '/reg',\n                  // search: '?type=forget',\n                  // hash: '#hash',\n                }}\n              >\n                忘记密码\n              </Link> */}\n            </Flex>\n          </Form.Item>\n\n          <Form.Item>\n            <Button block type=\"primary\" htmlType=\"submit\">\n              登录\n            </Button>\n            或\n            <Link\n              to={{\n                pathname: '/reg',\n                search: search,\n                // hash: '#hash',\n              }}\n            >\n              去注册\n            </Link>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Login);\n","export const emailArr = [\n  'qq.com',\n  '163.com',\n  '@sina.com',\n  '@aliyun.com',\n  '@16com',\n  '@18com',\n  '@hotmail.com',\n  '@sohu.com',\n  '@mail.com',\n  'gmail.com',\n];\n\nexport const inventCode = '666888';\n\n\nexport const limitPicMb = 2"],"names":["doLogin","data","posApi","register","getCaptcha","getApi","uploadPic","getFilePic","isSuccess","code","includes","isUnLogin","updateUrl","instance","axios","create","baseURL","timeout","headers","withCredentials","interceptors","request","use","config","error","Promise","reject","response","status","url","resolve","getToken","useConfigToken","token","axiosOptions","method","Object","assign","then","catch","e","message","params","useUrlParams","location","useLocation","URLSearchParams","search","paramsObject","forEach","value","key","Login","navigate","useNavigate","urlData","useMemo","from","setToken","setUserName","useGonfigUserName","options","setOptions","useState","_jsx","className","styles","children","_jsxs","_Form","name","initialValues","remember","onFinish","async","res","username","values","passwordOrCaptcha","password","_message","success","content","setTimeout","window","href","Item","rules","required","validator","valUserName","callback","test","Error","_AutoComplete","placeholder","prefix","UserOutlined","onSearch","emailArr","map","domain","label","_Input","Password","minLength","LockOutlined","type","_Flex","justify","align","valuePropName","noStyle","_Checkbox","_Button","block","htmlType","Link","to","pathname","memo","inventCode","limitPicMb"],"sourceRoot":""}